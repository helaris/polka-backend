#!/usr/bin/env node

/**
 * Module dependencies.
 */

const http = require('http');
const app = require('../app');
const fetch = require('node-fetch')

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (Number.isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '1337');
app.set('port', port);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`); // eslint-disable-line no-console
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`); // eslint-disable-line no-console
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  console.log(`Listening on ${bind}`); // eslint-disable-line no-console
}

/**
 * Socket setup
 */

// Split up into helper functions
const onlineUsers = [];

const io = require('socket.io')(server, {
  cors: {
    origin: '*'
  }
});

io.on('connection', client => {
  const userId = client.handshake.query['id']
  const userConnectionIds = {
    userId,
    clientId: client.id
  }
  onlineUsers.push(userConnectionIds);
  console.log('Client connected!');
  console.log(onlineUsers)

  client.on('disconnect', () => {
    onlineUsers.splice(onlineUsers.findIndex(user => user.userId === userId), 1)
    console.log("Client disconnected!");
    console.log(onlineUsers)
  })

  client.on('message', async (message, membersIds) => {
    const onlineRecievers = onlineUsers.filter(onlineUser => membersIds.includes(onlineUser.userId))
    // Address should not be hardcoded
    fetch(`https://polkae.herokuapp.com/api/chat/message`, {
      method: 'PUT',
      body: JSON.stringify(message),
      headers: { 'Content-Type': 'application/json' }
    }).then(res => {
      if(res.status === 200) {
        onlineRecievers.forEach(user => {
          io.to(user.clientId).emit('message', message);
        })
      }
    }).catch(err => {
      console.log(err.message)
    })

  })
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
